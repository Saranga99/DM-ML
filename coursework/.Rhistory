plot(cars)
R
# install package
install.packages("neuralnet")
```{r}
# Here, you will combine multiple columns or features into a single set of data
df=data.frame(TKS,CSS,Placed)
TKS=c(20,10,30,20,80,30)
CSS=c(90,20,40,50,50,80)
Placed=c(1,0,0,0,1,1)
# Here, you will combine multiple columns or features into a single set of data
df=data.frame(TKS,CSS,Placed)
df
# load library
require(neuralnet)
# fit neural network
nn=neuralnet(Placed~TKS+CSS,data=df, hidden=3,act.fct = "logistic",
linear.output = FALSE)
# load library
require(neuralnet)
# fit neural network
nn=neuralnet(Placed~TKS+CSS,data=df, hidden=3,act.fct = "logistic",
linear.output = FALSE)
# plot neural network
plot(nn)```{r}
```
# plot neural network
plot(nn)
# creating test set
TKS=c(30,40,85)
CSS=c(85,50,40)
test=data.frame(TKS,CSS)
## Prediction using neural network
Predict=compute(nn,test)
Predict$net.result
# Converting probabilities into binary classes setting threshold level 0.5
prob <- Predict$net.result
pred <- ifelse(prob>0.5, 1, 0)
pred
# creating training data set
TKS=c(20,10,30,20,80,30)
CSS=c(90,20,40,50,50,80)
Placed=c(1,0,0,0,1,1)
# Here, you will combine multiple columns or features into a single set of data
df=data.frame(TKS,CSS,Placed)
df
# load library
require(neuralnet)
# fit neural network
nn=neuralnet(Placed~TKS+CSS,data=df, hidden=3,act.fct = "logistic",
linear.output = FALSE)
# plot neural network
plot(nn)
# creating test set
TKS=c(30,40,85)
CSS=c(85,50,40)
test=data.frame(TKS,CSS)
## Prediction using neural network
Predict=compute(nn,test)
Predict$net.result
# creating training data set
TKS=c(20,10,30,20,80,30)
CSS=c(90,20,40,50,50,80)
Placed=c(1,0,0,0,1,1)
# Here, you will combine multiple columns or features into a single set of data
df=data.frame(TKS,CSS,Placed)
df
# load library
require(neuralnet)
# fit neural network
nn=neuralnet(Placed~TKS+CSS,data=df, hidden=3,act.fct = "logistic",
linear.output = FALSE)
# plot neural network
plot(nn)
# creating test set
TKS=c(30,40,85)
CSS=c(85,50,40)
test=data.frame(TKS,CSS)
## Prediction using neural network
Predict=compute(nn,test)
Predict$net.result
# Converting probabilities into binary classes setting threshold level 0.5
prob <- Predict$net.result
pred <- ifelse(prob>0.5, 1, 0)
pred
library(datasets)
library(ggplot2)
library(gridExtra)
library(class)
library(caret)
head(iris)
summary(iris)
p1 <- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, col=Species)) +
geom_point(alpha=0.8)
p2 <- ggplot(iris, aes(x=Petal.Length, y=Petal.Width, col=Species)) +
geom_point(alpha=0.8)
grid.arrange(p1, p2, ncol=2)
p1 <- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, col=Species)) +
geom_point(alpha=0.8)
p1 <- ggplot2(iris, aes(x=Sepal.Length, y=Sepal.Width, col=Species)) +
geom_point(alpha=0.8)
p1 <- ggplot2(iris, aes(x=Sepal.Length, y=Sepal.Width, col=Species)) +
geom_point(alpha=0.8)
p1 <- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, col=Species)) +
geom_point(alpha=0.8)
p1 <- ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, col=Species)) +
geom_point(alpha=0.8)
library(datasets)
library(ggplot2)
library(gridExtra)
library(class)
library(caret)
library(datasets)
library(ggplot2)
table(iris.test$Species,knn.fit)
ind <- sample(1:nrow(iris), nrow(iris)*0.7)
iris.train <- iris[ind, ]
iris.test <- iris[-ind, ]
knn.fit <- knn(train = iris.train[,1:4], test = iris.test[,1:4], cl = iris.train$Species, k = 3)
error[i] = 1- mean(knn.fit == iris.test$Species)
accuracy <- mean(knn.fit == iris.test$Species)
cat("Training Accuracy: ", accuracy, sep='')
table(iris.test$Species,knn.fit)
nb.test.acc1 <- confusionMatrix(iris.test$Species, knn.fit, mode="everything")
nb.test.acc1
library(readxl)   # this is the package for reading xlsx files
library(class)
library(caret)
library(readxl)   # this is the package for reading xlsx files
wbcd<-read_excel("wisc_bc_data.xlsx")
wbcd<-read_excel("wisc_bc_data.xlsx")
wbcd<-read_excel("/wisc_bc_data.xlsx")
wbcd<-read_excel("wisc_bc_data.xlsx")
library(readxl)   # this is the package for reading xlsx files
wbcd<-read_excel("wisc_bc_data.xlsx")
library(readxl)   # this is the package for reading xlsx files
wbcd<-read_excel("wisc_bc_data.xlsx")
library(readxl)   # this is the package for reading xlsx files
wbcd<-read_excel("wisc_bc_data.xlsx")
